package org.xbmc.kore.utils;

import android.support.annotation.NonNull;

/**
 * Represents a computation that will eventually complete.
 *
 * @param <T> The type of the value being computed or awaited.
 */
public interface Task<T> {

    /**
     * Starts the computation, invokes a procedure when done.
     *
     * @param then The consumer of the value being computed.
     */
    void start(@NonNull OnFinish<? super T> then);

    /**
     * A procedure that awaits a value.
     *
     * @param <T> The type of the value generated by a previous computation.
     */
    interface OnFinish<T> {
        void got(T result);
    }

    /**
     * A sequence of tasks chained together.
     *
     * The values generated by the individual tasks are ignored except for the
     * last one which may be accessed in the consumer if all of the tasks in
     * the chain completed successfully.
     *
     * @param <T> The type of the value generated by the last task.
     */
    class Sequence<T> implements Task<T> {
        private final Task<T> task;

        /**
         * Starts a sequence.
         *
         * @param task The last/outermost task
         */
        public Sequence(Task<T> task) {
            this.task = task;
        }

        /**
         * Continues the chain.
         *
         * @param next The next task to execute
         * @param <U> The type of the value generated by the next task
         * @return a sequence
         */
        public <U> Sequence<U> then(final Task<U> next) {
            return new Sequence<>(new Task<U>() {
                @Override
                public void start(@NonNull final OnFinish<? super U> then) {
                    task.start(new OnFinish<T>() {
                        @Override
                        public void got(T unused) {
                            next.start(then);
                        }
                    });
                }
            });
        }

        /**
         * Initiates the chain of tasks.
         *
         * @param block The final consumer.
         */
        @Override
        public void start(@NonNull OnFinish<? super T> block) {
            task.start(block);
        }
    }

}
