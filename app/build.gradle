apply plugin: 'com.android.application'

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "org.xbmc.kore"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 29
        versionName = getVersionName()
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        def supportedLocales = ["en",
                "af-za", "ast", "be-by", "bg", "ca", "cs", "da-dk", "de",
                "es", "es-MX", "eu", "fi", "fr", "hr", "hu", "it", "iw", "ja",
                "ko", "lt", "nl", "pl", "pt", "pt-BR", "ru", "sk", "sl", "zh-CN"]
        buildConfigField "String[]", "SUPPORTED_LOCALES", "new String[]{\""+
                supportedLocales.join("\",\"")+"\"}"
    }

    File keystoreFile = file('keystore.properties')

    signingConfigs {
        release {
            if (keystoreFile.exists()) {
                Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(keystoreFile))

                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            if (keystoreFile.exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt']
        }
    }

    lint {
        // Too much trouble keeping all translations in sync
        disable 'MissingTranslation'
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

ext {
    supportLibVersion = '28.0.0'
}

dependencies {
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-google-shortcuts:1.0.1'
    implementation 'androidx.media:media:1.6.0'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'de.greenrobot:eventbus:2.4.0'
    implementation 'org.jmdns:jmdns:3.5.7'
    implementation 'at.blogc:expandabletextview:1.0.5'
    implementation 'com.sothree.slidinguppanel:library:3.4.0'
    implementation 'com.simplecityapps:recyclerview-fastscroll:2.0.1'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestImplementation 'androidx.legacy:legacy-support-v13:1.0.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:2.2'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'

    testImplementation 'org.robolectric:robolectric:4.8.1'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    debugImplementation 'junit:junit:4.13.2'
}

def adb = android.getAdbExecutable().toString()
afterEvaluate {
    task grantAnimationPermissionDev(type: Exec, dependsOn: installDebug) {
        doFirst {
            println("Executing: $adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE")
            commandLine "$adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
        }
    }
    tasks.each { task ->
        if (task.name.startsWith('connectedDebugAndroidTest')) {
            task.dependsOn grantAnimationPermissionDev
        }
    }
}

/**
 * Makes sure assets are copied before running the unit tests
 */
tasks.whenTaskAdded { task ->
    if (task.name.contains("testDebugUnitTest")) {
        task.dependsOn assembleDebug
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' // << '-Xlint:deprecation'
}
